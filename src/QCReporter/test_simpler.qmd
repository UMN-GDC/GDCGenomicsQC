---
title: "test1"
format: pdf
editor: visual
params: 
  path_to_data: "/home/gdc/shared/GDC_pipeline/data/"
  output-dir: "/home/gdc/shared/GDC_pipeline/results/"
project:
  output-dir: /home/gdc/shared/GDC_pipeline/results/
---

The following is an automated report describing the quality control (QC)
processing of your dataset. detailed description of the QC steps taken.

```{r loadPackages}
#| message: false
#| echo: false
library(tidyverse)
```

# General Summary

The QC process outline below first process the data in aggregate
removing SNPs and subjects with large amounts of missingness. In
addition, SNPs are filtered to remove those with low minor allele
frequency (MAF), frequencies are two out of equlibrium based on
[Hardy-Weinberg equilibrium
(HWE)](https://www.nature.com/scitable/definition/hardy-weinberg-equilibrium-122/).
Then, for multiethnic samples, subject ancestries are predicted using
[principal components analysis
(PCA)](https://www.nature.com/articles/ng1847) and [k-means
clustering](https://en.wikipedia.org/wiki/K-means_clustering). Finally,
the original data is filtered again at the level of each predicted
ancestry before it is later rejoined into the full dataset. Table
@ref(tab:summary) summarizes the number of SNPs and subjects at each
step of the QC process.

## Loading in data from logs
```{r importdata, echo=FALSE} 
print(params$path_to_data)
path_to_data=params$path_to_data
setwd(params$path_to_data)

# Data
indmiss<-read.table(file="plink.imiss", header=TRUE)
snpmiss<-read.table(file="plink.lmiss", header=TRUE)
gender <- read.table("gender_check.sexcheck", header=T,as.is=T)
maf_freq <- read.table("MAF_check.frq", header =TRUE, as.is=T)
hwe<-read.table (file="plink.hwe", header=TRUE)
hwe_zoom<-read.table (file="plinkzoomhwe.hwe", header=TRUE)
het <- read.table("R_check.het", head=TRUE)
relatedness = read.table("pihat_min0.2.genome", header=T)
relatedness_zoom = read.table("zoom_pihat.genome", header=T)

#Reading in the tables for later use
QC2_geno_table <- read.table(file = "QC2_geno.txt",  quote="\"", comment.char="")
QC3_mind_table <- read.table("QC3_mind.txt",  quote="\"", comment.char="")
QC4_geno_table <- read.table("QC4_geno.txt",  quote="\"", comment.char="")
QC5_mind_table <- read.table("QC5_mind.txt",  quote="\"", comment.char="")
QC6_sex_check_table <- read.table("QC6_sex_check.txt", quote="\"", comment.char="")
QC7_maf_table <- read.table("QC_7_maf.txt", quote="\"", comment.char="")
QC8_hwe_table <- read.table("QC_8_hwe.txt", quote="\"", comment.char="")
QC8b_hwe_table <- read.table("QC_8b_hwe.txt", quote="\"", comment.char="")
QC9_filter_founders_table <- read.table("QC_9_filter-founders.txt", quote="\"", comment.char="")

QC_indep_pairwise_table <- read.csv("QC_indep_pairwise.txt", sep = "")
QC_indep_pairwise_bychr <- read.csv("each_SNP_QC_indep_pairwise.txt", sep = "")

```

```{r dataCleaning}
# Data cleaning for geno steps
geno_tab_1 = t(QC2_geno_table)
colnames(geno_tab_1)=geno_tab_1[1, ]
QC_step=c("2", "2")
geno_tab_1b=cbind(geno_tab_1, QC_step)
geno_tab_1_clean=geno_tab_1b[2,]
geno_tab_2 = t(QC4_geno_table)
colnames(geno_tab_2)=geno_tab_2[1, ]
QC_step=c("4", "4")
geno_tab_2b=cbind(geno_tab_2, QC_step)
geno_tab_2_clean=geno_tab_2b[2,]

# Data cleaning for mind steps
mind_tab_1 = t(QC3_mind_table)
colnames(mind_tab_1)=mind_tab_1[1, ]
QC_step=c("3", "3")
mind_tab_1b=cbind(mind_tab_1, QC_step)
mind_tab_1_clean=mind_tab_1b[2,]
mind_tab_2 = t(QC5_mind_table)
colnames(mind_tab_2)=mind_tab_2[1, ]
QC_step=c("5", "5")
mind_tab_2b=cbind(mind_tab_2, QC_step)
mind_tab_2_clean=mind_tab_2b[2,]

#Sex check
sex_check_tab = t(QC6_sex_check_table)
colnames(sex_check_tab)=sex_check_tab[1, ]
QC_step=c("6", "6")
sex_check_tab_2b=cbind(sex_check_tab, QC_step)
(sex_check_tab_2_clean=sex_check_tab_2b[2,])

#MAF check 
QC7_maf_tab=t(QC7_maf_table)
colnames(QC7_maf_tab)=QC7_maf_tab[1, ]
QC_step=c("7", "7")
maf_tab_2b=cbind(QC7_maf_tab, QC_step)

#hwe check table
hwe_tab_1 = t(QC8_hwe_table)
colnames(hwe_tab_1)=hwe_tab_1[1, ]
QC_step=c("QC_step", "8")
hwe_tab_1b=cbind(hwe_tab_1, QC_step)
hwe_tab_1_clean=hwe_tab_1b[2,]
hwe_tab_2 = t(QC8b_hwe_table)
colnames(hwe_tab_2)=hwe_tab_2[1, ]
QC_step=c("QC_step", "8.1")
hwe_tab_2b=cbind(hwe_tab_2, QC_step)
hwe_tab_2_clean=hwe_tab_2b[2,]

f_f_tab=t(QC9_filter_founders_table)
colnames(f_f_tab)=f_f_tab[1, ]
QC_step=c("QC_step", "9")
f_f_tab_2b=cbind(f_f_tab, QC_step)
f_f_tab_2_clean=f_f_tab_2b[2,]

```


```{r Geno_tab}
geno_table_summary = rbind(geno_tab_1_clean, geno_tab_2_clean)
geno_tibble=as_tibble(geno_table_summary)
```

```{r Mind_tab}
mind_table_summary = rbind(mind_tab_1_clean, mind_tab_2_clean)
mind_tibble=as_tibble(mind_table_summary)
```

```{r maf_tab}
maf_tab_2_clean=maf_tab_2b[2,]
```

```{r hwe_tab}
hwe_table_summary = rbind(hwe_tab_1_clean, hwe_tab_2_clean)
hwe_tibble=as_tibble(hwe_table_summary)
```

```{r full_table}
#Putting it all together if possible
full_table=rbind(geno_tab_1_clean, mind_tab_1_clean, geno_tab_2_clean, mind_tab_2_clean, maf_tab_2_clean, hwe_table_summary)
colnames(full_table)=c("InSubjects", "InMale", "InFemale", "InSNPs",
                       "OutSubjects", "NumRemoved", "OutSNPs", "Qc_step")
full_table 
full_tibb=as_tibble(full_table)
```

```{r indep_pairwise_table}
QC_indep_pairwise_table
```

```{r indep_bychr_pairwise}
QC_indep_pairwise_bychr
```


# Detailed QC summary


## Per Subject summary

Subjects were filtered based on missingness and heterozygosity. An LD
pruning step was also performed.

```{r}
num_indmiss=nrow(indmiss)
data.frame("Subject" = 1:nrow(indmiss),
           "Missingness" = indmiss$F_MISS) %>%
  ggplot(aes(x = Missingness)) +
  geom_histogram(bins = round(num_indmiss/25, digits = 0)) + 
  geom_vline(xintercept = 0.01, color = "red") + 
  xlab("Missingness per subject") +
  ggtitle("% SNPS missing per subject")
```

The [heterozygosity F statistic
(FIS)](https://en.wikipedia.org/wiki/F-statistics) the departure from
HWE in a population. The heterozygosity F statistic is given by the
following equation: $$
F = \frac{1}{N}\sum_{i=1}^N \frac{O_i - E_i}{E_i}
$$

```{r hetFilter}
#| label: fig-hetFilter
#| fig-cap: "Heterozygosity distributions with cutoff shown as red vertical line."

het$HET_RATE = (het$"N.NM." - het$"O.HOM.")/het$"N.NM."
lower_cutoff_het=mean(het$HET_RATE)-3*sd(het$HET_RATE)
upper_cutoff_het=mean(het$HET_RATE)+3*sd(het$HET_RATE)

data.frame("Subject" = 1:nrow(het),
           "Heterozygosity" = het$HET_RATE) %>%
  ggplot(aes(x = Heterozygosity)) +
  geom_histogram(bins = 100) + 
  geom_vline(xintercept = c(lower_cutoff_het, upper_cutoff_het), color = "red") + 
  xlab("Heterozygosity F statistic") +
  ggtitle("Heterozygous F statistic distribution")
```

Extra plot
```{r}
het_fail = subset(het, (het$HET_RATE < mean(het$HET_RATE)-3*sd(het$HET_RATE)) | (het$HET_RATE > mean(het$HET_RATE)+3*sd(het$HET_RATE)));

placeholder = c()
for(i in 1:nrow(het)) {
  if(het[i, 2] %in% het_fail[[2]]) {
    placeholder[i]="PROBLEM"
  }
  if(!het[i,2] %in% het_fail[[2]]) {
    placeholder[i] = "OK"
  }
}

temp_table = table(placeholder)
het_refined=cbind(het, placeholder)

data.frame("Count" = 1:nrow(het_refined),
           "Status" = het_refined$placeholder) %>%
  ggplot(aes(x=Status)) +
  geom_histogram(stat = "count")+ 
  xlab("Status") +
  ggtitle("Heterozygosity Analysis")

```

## Per SNP summary

SNPS were filtered based on missingness and MAF as well as HWE
@fig-firstFilter.

```{r firstFilter}
#| label: fig-firstFilter
#| fig-cap: "Missingness, MAF, and HWE filters involved in initial SNP filtering. Cutoffs are shown as red vertical lines"
num_snpmiss=nrow(snpmiss)
data.frame("SNP" = 1:nrow(snpmiss),
           "Missingness" = snpmiss$F_MISS) %>%
  ggplot(aes(x = Missingness)) +
  geom_histogram(bins = round(num_snpmiss/3000, digits = 0)) +
  geom_vline(xintercept = 0.01, color = "red") +
  xlab("Missingness per SNP") +
  ggtitle("% calls missing per SNP")


data.frame("SNP" = 1:nrow(maf_freq),
           "MAF" = maf_freq[,5]) %>%
  ggplot(aes(x = MAF)) +
  geom_histogram(bins = 100) +
  geom_vline(xintercept = 0.1, color = "red") +
  xlab("Minor allele frequency") +
  ggtitle("MAF distribution")


data.frame("SNP" = 1:nrow(hwe),
           "HWE" = hwe[,9]) %>%
  ggplot(aes(x = HWE)) +
  geom_histogram(bins = 100) +
  geom_vline(xintercept = 0.10, color = "red") +
  xlab("log(HWE p-value)") +
  ggtitle("Hardy-Weinberg Equilibrium p-value distribution")


```

## Gender checks
Needs verticle lines designating cuttoff points
```{r gender_plots}
ggplot(data=gender, aes(x=F))+
  geom_histogram(bins = 100)+
  xlab("F Value") +
  ggtitle("Gender Analysis")
```

```{r gender_plot2}
temptab= table(gender$STATUS)
ggplot(data = gender, aes(x=STATUS))'+
  geom_histogram(stat = "count") +
  xlab("Status") +
  ggtitle("Homozygosity Gender Analysis")
```


## Extra plots that need to be beautified and rearranged
```{r extraplots}
data.frame("SNP" = 1:nrow(hwe_zoom),
           "HWE" = hwe_zoom[,9]) %>%
  ggplot(aes(x = HWE)) +
  geom_histogram(bins = 50) +
  geom_vline(xintercept = -0.005, color = "red") +
  xlab("P-value") +
  ggtitle("Histogram HWE: strongly deviating SNPs only")
```

```{r extraPlot2}
ggplot(data= relatedness, aes(x=PI_HAT))+
  geom_histogram(bins = round(num_indmiss/50, digits = 0))+
  xlab("Proportion IBD") +
  ggtitle("Histogram Relatedness")

```



## Ancestry predictions

Ancestries are predicted after the initial round of QC steps. The
principal components upon which the population is stratifed, are based
off of the [genetic relatedness matrix
(GRM)](https://zjuwhw.github.io/2021/08/20/GRM.html). The subjects are
then projected onto the PC space and assigned ethnicities using k-means
clustering based on either a standard genomic dataset (such as though
genomes) are by the reported ancestries of the subject in the study.
Figure @fig-ancestryPredictions) the projection of each subject onto the
first few PCs. They are colored by their reported ancestries.

The densities of ancestries based on the reference set are represent by
the 10% contour lines of the 2d density plots with the observed
populations presented as points over top of the densities shown in
@fig-ancestryPredictions.

```{r ancestryPredictions}
#| label: fig-ancestryPredictions
#| fig-cap: "Ancestry predictions plotted over first decile contour for each ancestry."
data.frame(Ancestry = rep(c("Ancestry 1", "Ancestry 2"), each = 50),
           PC1 = c(rnorm(50, 0, 1), rnorm(50, 9, 1)),
           PC2 = c(rnorm(50, 0, 1), rnorm(50, 9, 1))) %>%
  ggplot(aes(x = PC1, y = PC2, color = Ancestry)) +
  geom_density_2d(breaks = c(0.05)) + 
  geom_point()
```

## Per Ancestry summary

We also summarize the QC metrics per ancestry. @fig-ancestrySummary)
shows the distribution of MAF per ancestry.

```{r ancestrySummary}
#| label: fig-ancestrySummary
#| fig-cap: "MAF faceted by ancestry with the cutoff vizualized as a red vertical line."
data.frame("Ancestry" = rep(c("1", "2", "3"), each = 50),
           "MAF" = c(rbeta(50, 3, 2), rbeta(50, 3, 3), rbeta(50, 4, 1))) %>%
  ggplot(aes(x = MAF)) +
  geom_histogram() + 
  geom_vline(xintercept = 0.05, color = "red") + 
  xlab("Minor allele frequency") +
  ggtitle("Minor allele frequency per ancestry") + 
  facet_wrap(~Ancestry, ncol = 2)

```



## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
